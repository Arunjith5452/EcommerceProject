<%-include("../../views/partials/admin/header")%>
<style>
    .status-column {
        display: flex;
        flex-direction: column;
        gap: 8px;  
    }

    .status-item {
        display: flex;
        align-items: center;
        min-height: 24px;  
    }

    .badge {
        padding: 6px 12px; 
        font-size: 0.85rem;
        line-height: 1;
        white-space: nowrap;
    }

    .order-products {
        display: flex;
        flex-direction: column;
        gap: 8px; 
    }

    .product-item {
        display: flex;
        align-items: center;
        min-height: 24px;  
        padding: 2px 0;
    }

    .product-item {
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table td {
        padding: 1rem 0.75rem;
        vertical-align: top;
    }
    .card {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .table th {
        font-weight: 600;
        background-color: #f8f9fa;
    }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .card-title {
        color: #333;
        font-size: 1.1rem;
        margin-bottom: 0;
    }

    .table-responsive {
        max-height: 400px;
        overflow-y: auto;
    }

    .revenue-cell {
        color: #28a745;
        font-weight: 500;
    }

    .units-cell {
        color: #6c757d;
    }
    .card {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    margin-bottom: 1.5rem;
}

.card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    padding: 1rem 1.25rem;
}

.card-body {
    padding: 1.25rem;
    position: relative;
}

.chart-container {
    position: relative;
    margin: auto;
}

@media (max-width: 768px) {
    .col-md-6 {
        margin-bottom: 1rem;
    }
    
    canvas {
        height: 250px !important;
    }
}
</style>

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Dashboard<br>
            </h2>
            <p>Monitor your business performance in real-time</p>
        </div>
        <div>
            <!-- Download Report Dropdown -->
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" id="downloadReportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="text-muted material-icons md-file_download"></i> Download Report
                </button>
                <ul class="dropdown-menu" aria-labelledby="downloadReportDropdown">
                    <li><a class="dropdown-item" href="/admin/download/pdf" id="exportPdf">Export PDF</a></li>
                    <li><a class="dropdown-item" href="/admin/download/excel" id="exportExcel">Export Excel</a></li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Sales Analytics Section -->
    <div class="card mb-4">
        <header class="card-header">
            <h4 class="card-title">Sales Analytics</h4>
        </header>
        <div class="card-body">
            <!-- Quick Filter -->
            <div class="row mb-4 align-items-end">
                <div class="col-md-3">
                    <label for="quickFilter" class="form-label">Quick Filter:</label>
                    <select id="quickFilter" class="form-select">
                        <option value="daily" <%= selectedFilter === 'daily' ? 'selected' : '' %>>Daily</option>
                        <option value="weekly" <%= selectedFilter === 'weekly' ? 'selected' : '' %>>Weekly</option>
                        <option value="monthly" <%= selectedFilter === 'monthly' ? 'selected' : '' %>>Monthly</option>
                        <option value="yearly" <%= selectedFilter === 'yearly' ? 'selected' : '' %>>Yearly</option>
                        <option value="custom" <%= selectedFilter === 'custom' ? 'selected' : '' %>>Custom Date Range</option>
                    </select>
                </div>
                <div class="col-md-2" id="startDateContainer" style="display: none;">
                    <label for="startDate" class="form-label">Start Date:</label>
                    <input type="date" id="startDate" class="form-control">
                </div>
                <div class="col-md-2" id="endDateContainer" style="display: none;">
                    <label for="endDate" class="form-label">End Date:</label>
                    <input type="date" id="endDate" class="form-control">
                </div>
                <div class="col-md-4 d-flex align-items-end gap-2">
                    <button class="btn btn-primary" onclick="applyFilter()">Apply</button>
                    <button class="btn btn-secondary" onclick="removeFilter()">Remove </button>
                </div>
            </div>

            <!-- Key Metrics -->
            <div class="row">
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light">
                                <i class="text-primary material-icons md-monetization_on"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Sales</h6>
                                <span id="totalSales">₹<%= totalRevenue %></span>
                                <span class="text-sm"><%= revenueChange %>% vs last period</span>
                            </div>
                        </article>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light">
                                <i class="text-success material-icons md-shopping_cart"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Orders Count</h6>
                                <span id="ordersCount"><%= totalOrders %></span>
                                <span class="text-sm"><%= ordersChange %>% vs last period</span>
                            </div>
                        </article>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light">
                                <i class="text-warning material-icons md-local_offer"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Discount</h6>
                                <span id="totalDiscount">₹<%= totalDiscount %></span>
                                <span class="text-sm"><%= discountChange %>% vs last period</span>
                            </div>
                        </article>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-info-light">
                                <i class="text-info material-icons md-people"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Users</h6>
                                <span id="totalUsers"><%= totalUsers %></span>
                                <span class="text-sm"><%= usersChange %>% vs last period</span>
                            </div>
                        </article>
                    </div>
                </div>
                

            <!-- Additional Boxes -->
            <div class="row">
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light">
                                <i class="text-danger material-icons md-shopping_bag"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Products</h6>
                                <span id="totalProducts"><%=totalProducts%></span>
                                <span class="text-sm">In <%=totalCategories%> Categories</span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-info-light">
                                <i class="fa-solid fa-ticket"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Coupons</h6>
                                <span id="totalCoupons"><%=totalCoupons%></span>
                                <span class="text-sm">Active Coupons</span>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Details Table -->
    <div class="card mb-4">
        <header class="card-header">
            <h4 class="card-title">Order Details</h4>
        </header>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table align-middle table-nowrap mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Products</th>
                            <th>Amount</th>
                            <th>Discount</th>
                            <th>Final Amount</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orderDetails.forEach(order => { %>
                        <tr>
                            <td><%=order.orderId.slice(0,12)%></td>
                            <td><%=order.createdOn.toDateString()%></td>
                            <td>
                                <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                                    <div class="order-products">
                                        <% order.orderedItems.forEach(item => { %>
                                            <div class="product-item">
                                                <%= item.product ? item.product.productName : 'Unknown Product' %> 
                                                (Qty: <%= item.quantity %>, 
                                                Price: ₹<%= item.product && item.price ? 
                                                    (item.price * item.quantity) : 
                                                    'Price Unavailable' %>)
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else { %>
                                    <span>No products found</span>
                                <% } %>
                            </td>
                            <td>₹<%=order.totalPrice%></td>
                            <td>₹<%=order.discount%></td>
                            <td>₹<%=order.finalAmount%></td>
                            <td>
                                <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                                    <div class="status-column">
                                        <% order.orderedItems.forEach(item => { %>
                                            <div class="status-item">
                                                <span class="badge badge-soft-<%= 
                                                    item.status === 'Delivered' ? 'success' : 
                                                    item.status === 'Shipped' ? 'info' : 
                                                    item.status === 'Processing' ? 'warning' : 
                                                    item.status === 'Cancelled' ? 'danger' : 'secondary' 
                                                %>">
                                                    <%= item.status %>
                                                </span>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } %>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            <div class="mt-3">
                <nav aria-label="Order details navigation">
                    <ul class="pagination justify-content-center">
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                                <a class="page-link <%= (i === currentPage) ? 'bg-success text-white border-success' : '' %>" 
                                   href="javascript:void(0)" 
                                   onclick="changePage(<%= i %>)">
                                    <%= i %>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
   <div class="row">
    <!-- Sales Chart -->
    <div class="col-12 mb-4">
        <div class="card">
            <header class="card-header">
                <h4 class="card-title">Sales Analytics Chart</h4>
            </header>
            <div class="card-body">
                <canvas id="salesChart" style="width: 100%; height: 400px;"></canvas>
            </div>
        </div>
    </div>
    
    <!-- Pie Charts Row -->
    <div class="col-md-6 mb-4">
        <div class="card">
            <header class="card-header">
                <h4 class="card-title">Top Products by Revenue</h4>
            </header>
            <div class="card-body">
                <canvas id="productsChart" style="width: 100%; height: 300px;"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-md-6 mb-4">
        <div class="card">
            <header class="card-header">
                <h4 class="card-title">Top Categories by Revenue</h4>
            </header>
            <div class="card-body">
                <canvas id="categoriesChart" style="width: 100%; height: 300px;"></canvas>
            </div>
        </div>
    </div>
</div>
    <!-- <div class="row"> -->
        <!-- Best Selling Products -->
            <div class="card mb-4">
                <header class="card-header">
                    <h4 class="card-title">Best Selling Products</h4>
                </header>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table align-middle table-nowrap">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th>Units Sold</th>
                                    <th>Revenue</th>
                                </tr>
                            </thead>
                            <tbody id="bestProducts">
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    
        <!-- Best Categories -->
            <div class="card mb-4">
                <header class="card-header">
                    <h4 class="card-title">Top Categories</h4>
                </header>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table align-middle table-nowrap">
                            <thead class="table-light">
                                <tr>
                                    <th>Category</th>
                                    <th>Units Sold</th>
                                    <th>Revenue</th>
                                </tr>
                            </thead>
                            <tbody id="bestCategories">
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>    
</section>
<%-include("../../views/partials/admin/footer")%>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
   document.addEventListener('DOMContentLoaded', function () {
  const quickFilter = document.getElementById('quickFilter');
  const startDateContainer = document.getElementById('startDateContainer');
  const endDateContainer = document.getElementById('endDateContainer');
  const startDate = document.getElementById('startDate');
  const endDate = document.getElementById('endDate');

  quickFilter.value = '<%= selectedFilter %>';

  if (quickFilter.value === 'custom') {
    startDateContainer.style.display = 'block';
    endDateContainer.style.display = 'block';
    startDate.value = '<%= startDate %>';
    endDate.value = '<%= endDate %>';
  }

  quickFilter.addEventListener('change', function () {
    if (this.value === 'custom') {
      startDateContainer.style.display = 'block';
      endDateContainer.style.display = 'block';
    } else {
      startDateContainer.style.display = 'none';
      endDateContainer.style.display = 'none';
    }
  })
})


    function applyFilter() {
        const quickFilter = document.getElementById('quickFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

       if(quickFilter === 'custom'){
        if(!startDate || !endDate){
            Swal.fire({
                icon:'error',
                title:'Oops...',
                text:'Please provide both start and end dates for the custom date range,'
            });
            return
        }
        if(new Date(endDate) < new Date(startDate)){
            Swal.fire({
                icon: 'error',
                title: 'Invalid Date Range',
                text: 'End date cannot be smaller than start date.'
            })
            return
        }
       }

       const url = `/admin/dashboard?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}&page=1`;
       window.location.href = url;
      
    }

    function removeFilter() {
        document.getElementById('quickFilter').value = 'daily';
        document.getElementById('startDate').value = '';
        document.getElementById('endDate').value = '';
        document.getElementById('startDateContainer').style.display = 'none';
        document.getElementById('endDateContainer').style.display = 'none';
        applyFilter();
    }

    function changePage(pageNumber) {
    const quickFilter = document.getElementById('quickFilter').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    const url = `/admin/dashboard?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}&page=${pageNumber}`;
    window.location.href = url;
}

    document.getElementById('exportPdf').addEventListener('click', function () {
        const quickFilter = document.getElementById('quickFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        window.location.href = `/download-sales-report-pdf?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}`;
    });

    document.getElementById('exportExcel').addEventListener('click', function () {
        const quickFilter = document.getElementById('quickFilter').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        window.location.href = `/download-sales-report-excel?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}`;
    });

 

function loadTopPerformers() {
    const quickFilter = document.getElementById('quickFilter').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    ['bestProducts', 'bestCategories'].forEach(tableId => {
        const tbody = document.getElementById(tableId);
        if (tbody) {
            tbody.innerHTML = '<tr><td colspan="3">Loading...</td></tr>';
        }
    });
    fetch(`/admin/api/dashboard/top-performers?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}`)
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(data => {
            updateTopPerformersTable('bestProducts', data.products);
            updateTopPerformersTable('bestCategories', data.categories);
        })
        .catch(error => {
            console.error('Error loading top performers:', error);
            ['bestProducts', 'bestCategories'].forEach(tableId => {
                const tbody = document.getElementById(tableId);
                if (tbody) {
                    tbody.innerHTML = '<tr><td colspan="3">Error loading data</td></tr>';
                }
            });
        });
}


function updateTopPerformersTable(tableId, data) {
    const tbody = document.getElementById(tableId);
    if (!tbody) return;

    if (!data || !Array.isArray(data) || data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="3">No data available</td></tr>';
        return;
    }

    tbody.innerHTML = data.map(item => `
        <tr>
            <td>${item.name || 'N/A'}</td>
            <td class="units-cell">${(item.unitsSold || 0).toLocaleString()}</td>
            <td class="revenue-cell">₹${(item.revenue || 0).toLocaleString()}</td>
        </tr>
    `).join('');
}

document.addEventListener('DOMContentLoaded', function() {
    initSalesChart();
    initPieCharts();
    loadTopPerformers();
});

function initPieCharts() {
    initProductsPieChart();
    initCategoriesPieChart();
}

function initProductsPieChart() {
    const ctx = document.getElementById('productsChart').getContext('2d');
    window.productsChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                    'rgba(255, 159, 64, 0.8)',
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: 'white',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        boxWidth: 12,
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const value = context.raw;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((value / total) * 100).toFixed(1);
                            return `₹${value.toLocaleString()} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}

function initCategoriesPieChart() {
    const ctx = document.getElementById('categoriesChart').getContext('2d');
    window.categoriesChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                    'rgba(255, 159, 64, 0.8)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: 'white',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        boxWidth: 12,
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const value = context.raw;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((value / total) * 100).toFixed(1);
                            return `₹${value.toLocaleString()} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}


function initSalesChart() {
    const canvas = document.getElementById('salesChart');
    if (!canvas) {
        console.error('Sales chart canvas not found');
        return;
    }

    const parent = canvas.parentNode;
    if (parent) {
        parent.removeChild(canvas);
        const newCanvas = document.createElement('canvas');
        newCanvas.id = 'salesChart';
        newCanvas.style.width = '100%';
        newCanvas.style.height = '400px';
        parent.appendChild(newCanvas);
    }

    const ctx = document.getElementById('salesChart').getContext('2d');
    
    try {
        const salesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Loading...'],
                datasets: [{
                    label: 'Sales Revenue',
                    data: [0],
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '₹' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        window.salesChart = salesChart;

        fetchChartData();
    } catch (error) {
        console.error('Error initializing chart:', error);
        showChartError();
    }
}

function fetchChartData() {
    const quickFilter = document.getElementById('quickFilter').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    console.log('Fetching chart data with params:', {
        quickFilter,
        startDate,
        endDate
    });

    fetch(`/admin/api/dashboard/analytics?filter=${quickFilter}&startDate=${startDate}&endDate=${endDate}`)
        .then(response => {
            console.log('Response status:', response.status);
            if (!response.ok) {
                return response.text().then(errorText => {
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log('Received data:', data);
            
            if (!data.salesData || !Array.isArray(data.salesData)) {
                console.error('Invalid data format:', data);
                showNoDataMessage();
                return;
            }

            if (data.salesData.length === 0) {
                console.warn('Empty sales data');
                showNoDataMessage();
                return;
            }

            updateChartData(data.salesData);
            updatePieCharts(data.bestSellingProducts, data.bestCategories);
        })
        .catch(error => {
            console.error('Detailed error loading chart data:', error);
            showChartError();
        });
}

function showNoDataMessage() {
    const canvas = document.getElementById('salesChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = '#666';
    ctx.font = '14px Arial';
    ctx.fillText('No data available for selected date range', canvas.width / 2, canvas.height / 2);
}



function updatePieCharts(products, categories) {
    if (window.productsChart && products && products.length > 0) {
        window.productsChart.data.labels = products.map(item => item.name);
        window.productsChart.data.datasets[0].data = products.map(item => item.revenue);
        window.productsChart.update();
    }

    if (window.categoriesChart && categories && categories.length > 0) {
        window.categoriesChart.data.labels = categories.map(item => item.name);
        window.categoriesChart.data.datasets[0].data = categories.map(item => item.revenue);
        window.categoriesChart.update();
    }
}

function updateChartData(salesData) {
    try {
        if (!window.salesChart) {
            console.error('Chart instance not found');
            return;
        }

        const chart = window.salesChart;
        const formattedData = salesData.map(item => ({
            date: formatDateLabel(item.date, getCurrentFilter()),
            revenue: parseFloat(item.revenue) || 0
        }));

        const filterType = getCurrentFilter();
        updateChartOptions(chart, filterType);

        chart.data.labels = formattedData.map(item => item.date);
        chart.data.datasets[0].data = formattedData.map(item => item.revenue);
        chart.update('active');
    } catch (error) {
        console.error('Error updating chart:', error);
        showChartError();
    }
}

function getCurrentFilter() {
    return document.getElementById('quickFilter').value;
}

function formatDateLabel(date, filterType) {
    const dateObj = new Date(date);
    
    switch(filterType) {
        case 'daily':
            return date.includes(':') ? 
                   `${dateObj.getHours()}:00` : 
                   date;
        case 'weekly':
            return new Date(date).toLocaleDateString('en-US', { 
                weekday: 'short', 
                month: 'short', 
                day: 'numeric' 
            });
        case 'monthly':
            return new Date(date).toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric' 
            });
        case 'yearly':
            return new Date(date).toLocaleDateString('en-US', { 
                month: 'short', 
                year: 'numeric' 
            });
        case 'custom':
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const diffDays = Math.ceil(
                (new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24)
            );
            
            if (diffDays <= 7) {
                return new Date(date).toLocaleDateString('en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                });
            } else if (diffDays <= 31) {
                return new Date(date).toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric' 
                });
            } else {
                return new Date(date).toLocaleDateString('en-US', { 
                    month: 'short', 
                    year: 'numeric' 
                });
            }
        default:
            return date;
    }
}
function updateChartOptions(chart, filterType) {
    chart.options.scales.x = {
        ...chart.options.scales.x,
        ticks: {
            maxRotation: filterType === 'daily' ? 0 : 45,
            autoSkip: true,
            maxTicksLimit: getMaxTicksLimit(filterType)
        }
    };

    chart.options.plugins.tooltip = {
        ...chart.options.plugins.tooltip,
        callbacks: {
            title: function(tooltipItems) {
                const item = tooltipItems[0];
                return `Date: ${item.label}`;
            },
            label: function(context) {
                return `Revenue: ₹${context.raw.toLocaleString()}`;
            }
        }
    };
}

function getMaxTicksLimit(filterType) {
    switch(filterType) {
        case 'daily':
            return 24; // Show up to 24 hours
        case 'weekly':
            return 7;  // Show up to 7 days
        case 'monthly':
            return 31; // Show up to 31 days
        case 'yearly':
            return 12; // Show up to 12 months
        default:
            return 10;
    }
}
function showChartError() {
    const canvas = document.getElementById('salesChart');
    if (!canvas) return;

    const parent = canvas.parentNode;
    if (!parent) return;

    parent.removeChild(canvas);

    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger';
    errorDiv.style.margin = '20px';
    errorDiv.innerHTML = `
        <strong>Error loading chart</strong><br>
        Please try refreshing the page. If the problem persists, contact support.
    `;
    parent.appendChild(errorDiv);
}

function updateDashboardData() {
    try {
        initSalesChart();
        initPieCharts(); 
        loadTopPerformers();
    } catch (error) {
        console.error('Error updating dashboard:', error);
        showChartError();
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const quickFilter = document.getElementById('quickFilter');
    if (quickFilter) {
        quickFilter.addEventListener('change', updateDashboardData);
    }

    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    if (startDate && endDate) {
        startDate.addEventListener('change', updateDashboardData);
        endDate.addEventListener('change', updateDashboardData);
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const quickFilter = document.getElementById('quickFilter');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');

    if (quickFilter) {
        quickFilter.addEventListener('change', function() {
            if (this.value !== 'custom') {
            }
        });
    }

    if (startDate && endDate) {
        [startDate, endDate].forEach(input => {
            input.addEventListener('change', function() {
                if (quickFilter.value === 'custom' && startDate.value && endDate.value) {
                }
            });
        });
    }
});

function updateSalesChart(salesData) {
    const chartInstance = window.salesChart;
    if (chartInstance) {
        chartInstance.data.labels = salesData.map(item => item.date);
        chartInstance.data.datasets[0].data = salesData.map(item => item.revenue);
        chartInstance.update();
    }
}
</script>