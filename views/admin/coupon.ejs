<%- include("../../views/partials/admin/header") %>
<style>
  .col-md-3 {
   padding: 20px;
   border: 1px solid #ddd;
   border-radius: 10px;
   margin: 10px;
   width: 25%;
 }

 .col-md-9 {
   padding: 20px;
   margin: 10px;
   width: 70%;
   margin-left: auto;
 }

 .table-container {
   overflow-x: auto;
   margin-top: 20px;
   box-shadow: 0 0 10px rgba(0,0,0,0.1);
   border-radius: 8px;
   background: white;
 }

 .table {
   width: 100%;
   min-width: 800px;
   margin-bottom: 0;
 }

 .btn-group {
  display: flex;
  gap: 8px;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}
.btn {
  padding: 8px 16px;
  border-radius: 4px;
  font-size: 14px;
  height: 35px;
  width: 100px; /* Increased width to fit text better */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  text-align: center;
  cursor: pointer;
  border: 1px solid transparent;
  white-space: nowrap;
  margin: 0;
}

 .btn-danger:hover {
   background-color: #c82333;
   border-color: #bd2130;
 }

 .error-message {
   color: red;
   margin-top: 5px;
 }

 .form-label {
   margin-bottom: 8px;
 }

 .form-control {
   width: 100%;
   padding: 8px;
   margin-bottom: 10px;
   border: 1px solid #ccc;
   border-radius: 5px;
   box-sizing: border-box;
 }

 .d-grid {
   margin-top: 20px;
 }
 .btn-primary:hover {
  background-color: #0056b3;
  border-color: #0056b3;
}

.btn-danger {
  background-color: #dc3545;
  border-color: #dc3545;
  color: white;
}

/* Add this to ensure table cell alignment */
.table td {
  vertical-align: middle;
}

/* Ensure the Actions column has enough width */
.table th:last-child,
.table td:last-child {
  text-align: center;
  min-width: 220px;
  padding: 12px 16px;
}

 .btn-primary {
   background-color: #007bff;
   color: #fff;
   border: 1px solid #007bff;
 }

 .btn-primary:hover {
   background-color: #0056b3;
   border-color: #0056b3;
 }

 .row {
   display: flex;
   flex-wrap: wrap;
   margin-right: -10px;
   margin-left: -10px;
   justify-content: space-between;
 }

 /* Make table more compact */
 .table td, .table th {
   padding: 12px 15px;
   white-space: nowrap;
 }

 /* Add hover effect to table rows */
 .table-hover tbody tr:hover {
   background-color: rgba(0,123,255,0.05);
 }
 </style>
<section class="content-main">
 <div class="content-header">
   <div>
     <h2 class="content-title card-title">Coupons</h2>
   </div>
 </div>
 <div class="card">
   <div class="card-body">
     <div class="row">
       <div class="col-md-3">
         <form method="post" action="/admin/createCoupon">
           <body onload="setDefaultStartDate()"></body>
             <div class="mb-4">
               <label for="coupon-name" class="form-label">Coupon Name</label>
               <input
                 type="text"
                 id="coupon-name"
                 name="couponName"
                 placeholder="Type here"
                 class="form-control"
               />
               <div id="error-coupon-name" class="error-message"></div>
             </div>


             <div>
               <label for="startingDate" class="form-label">Start Date</label>
               <input
                 type="date"
                 name="startDate"
                 class="form-control"
                 required="true"
                 id="startingDate"
               />
               <div id="error-start-date" class="error-message"></div>
             </div>


             <div>
               <label for="expiringDate" class="form-label">End Date</label>
               <input
                 type="date"
                 name="endDate"
                 class="form-control"
                 id="expiringDate"
                 required="true"
               />
               <div id="error-end-date" class="error-message"></div>
             </div>


             <div>
               <label for="offer-price" class="form-label">Offer Price</label>
               <input
                 type="text"
                 name="offerPrice"
                 placeholder="Type here"
                 class="form-control"
               />
               <div id="error-offer-price" class="error-message"></div>
             </div>


             <div>
               <label for="minimum-price" class="form-label"
                 >Minimum Price</label
               >
               <input
                 type="text"
                 name="minimumPrice"
                 placeholder="Type here"
                 class="form-control"
               />
               <div id="error-minimum-price" class="error-message"></div>
             </div>


             <div class="d-grid">
               <button
                 class="btn btn-primary mt-20"
                 onclick="return validateForm(event)"
                 type="submit"
               >
                 Add Coupon
               </button>
             </div>
             <div id="err-msg" class="error-message"></div>
           </body>
         </form>
       </div>
       <div class="col-md-9">
        <div class="table-container">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Name</th>
                <th>Created On</th>
                <th>Expire On</th>
                <th>Offer Price</th>
                <th>Minimum Price</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <%for(let i=0;i<coupons.length;i++){%>
              <tr>
                <td><%=coupons[i].name%></td>
                <td><%=new Date(coupons[i].createdOn).toLocaleDateString('en-US')%></td>
                <td><%=new Date(coupons[i].expireOn).toLocaleDateString('en-US')%></td>
                <td>₹<%=coupons[i].offerPrice%></td>
                <td>₹<%=coupons[i].minimumPrice%></td>
                <td><%=coupons[i].isList%></td>
                <td>
                  <div class="btn-group">
                    <a href="/admin/editCoupon?id=<%=coupons[i]._id%>" class="btn btn-primary">Edit</a>
                    <button onclick="confirmDelete('<%=coupons[i]._id%>')" class="btn btn-danger">Delete</button>
                  </div>
                </td>
              </tr>
              <%}%>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
</section>
<script>
 function validateForm() {
   document.querySelectorAll(".error-message").forEach((element) => (element.innerHTML = ""));
   const sDate = document.getElementsByName("startDate")[0].value;
   const eDate = document.getElementsByName("endDate")[0].value;
   const sDateObj = new Date(sDate);
   const eDateObj = new Date(eDate);
   const todayDateObj = new Date();
   todayDateObj.setHours(0, 0, 0, 0);


   if (sDateObj > eDateObj) {
     document.getElementById("error-end-date").innerHTML ="End date should be after the start date";
     return false;
   }


   if (sDateObj <= todayDateObj) {
     document.getElementById("error-start-date").innerHTML ="Starting date should be greater than or equal to today's date";
     return false;
   }


   let name = document.getElementsByName("couponName")[0].value;
   const nameRegex = /^[A-Za-z0-9]{1,50}$/;


   if (!nameRegex.test(name)) {
     document.getElementById("error-coupon-name").innerHTML =
       "Coupon Name error";
     return false;
   }


   const offerPriceInput = document.getElementsByName("offerPrice")[0];
   const minimumPriceInput = document.getElementsByName("minimumPrice")[0];


   const offerPrice = offerPriceInput.value.trim() !== ""? parseInt(offerPriceInput.value): NaN;
   const minimumPrice = minimumPriceInput.value.trim() !== ""? parseInt(minimumPriceInput.value): NaN;


   if (isNaN(offerPrice) || isNaN(minimumPrice) || offerPrice >= minimumPrice) {
     document.getElementById("error-offer-price").innerHTML = "Offer Price must be greater than Minimum Price";
     return false;
   }


   if (isNaN(offerPrice) || isNaN(minimumPrice)) {
     document.getElementById("error-offer-price").innerHTML ="Please enter numeric values for Offer Price and Minimum Price";
     return false;
   }


       const formData = {
       couponName: name,
       startDate: sDateObj,
       endDate: eDateObj,
       offerPrice: offerPrice,
       minimumPrice: minimumPrice
   };
   return true;
 }


 function setDefaultStartDate(){
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth()+1).toString().padStart(2,"0");
    let day = today.getDate().toString().padStart(2,"0");
    document.getElementById('startingDate').value = `${year}-${month}-${day}`
 }


 async function confirmDelete(couponId) {
  const result = await Swal.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, delete it!"
  });

  if (result.isConfirmed) {
    await deleteCoupon(couponId);
  }
}

async function deleteCoupon(couponId) {
  try {
    const response = await fetch(`/admin/deletecoupon?id=${couponId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    await Swal.fire({
      icon: "success",
      title: "Deleted!",
      text: "The coupon has been deleted.",
      confirmButtonText: "OK"
    });

    window.location.reload();
  } catch (error) {
    console.error('Error:', error);
    await Swal.fire({
      icon: "error",
      title: "Error!",
      text: "Failed to delete the coupon. Please try again."
    });
  }
}
</script>
<%- include("../../views/partials/admin/footer") %>

