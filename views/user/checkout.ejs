<%- include("../../views/partials/user/header") %>
    <style>
        .checkout-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 15px;
        }

        .checkout-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 30px;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
        }

        .checkout-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 24px;
            margin-bottom: 24px;
        }

        .section-heading {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            font-size: 18px;
            font-weight: 600;
            gap: 10px;
        }

        .section-heading i {
            color: #333;
        }

        .address-box {
            border: 2px solid #e5e5e5;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .address-box.selected {
            border-color: #000;
            background-color: #f8f9fa;
        }

        .address-content {
            display: flex;
            gap: 15px;
        }

        .address-details p {
            margin-bottom: 5px;
            color: #4a4a4a;
        }

        .address-details .name {
            font-weight: 600;
            color: #000;
        }

        .add-address-btn {
            color: #000;
            font-weight: 600;
            background: none;
            border: none;
            padding: 8px 0;
            cursor: pointer;
        }

        .add-address-btn:hover {
            text-decoration: underline;
        }

        .payment-option {
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 16px;
        }

        .order-item {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 16px;
            padding-bottom: 16px;
            border-bottom: 1px solid #e5e5e5;
        }

        .order-details h4 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .order-quantity,
        .order-size {
            color: #666;
            font-size: 14px;
            margin: 2px 0;
        }

        .order-price {
            font-weight: 600;
            font-size: 16px;
        }

        /* Summary Styles */
        .order-summary {
            border-top: 1px solid #e5e5e5;
            margin-top: 20px;
            padding-top: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            color: #4a4a4a;
            font-size: 14px;
        }

        .summary-row.total {
            font-weight: 700;
            font-size: 18px;
            color: #000;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e5e5e5;
        }


        .checkout-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 24px;
            margin-bottom: 24px;
        }


        .place-order-btn {
            width: 100%;
            background: #000;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s;
        }

        .place-order-btn:hover {
            background: #333;
        }


        .delivery-info {
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 14px;
            margin-top: 16px;
            gap: 8px;
        }

        .customer-details {
            margin-bottom: 16px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #e5e5e5;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-group input:focus {
            outline: none;
            border-color: #000;
        }

        .payment-methods {
            display: grid;
            gap: 16px;
        }

        .payment-option {
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .payment-option:hover {
            border-color: #000;
        }

        .payment-option.selected {
            border-color: #000;
            background-color: #f8f9fa;
        }

        .payment-content {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .payment-icon {
            font-size: 24px;
            color: #333;
        }

        .payment-details p {
            margin: 0;
        }

        .payment-details .name {
            font-weight: 600;
            color: #000;
        }

        .payment-details .description {
            font-size: 14px;
            color: #666;
        }

        .required {
            color: red;
            margin-left: 2px;
        }

        .customer-details-display {
            margin-bottom: 16px;
        }

        .details-group {
            margin-bottom: 16px;
        }

        .details-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .detail-value {
            padding: 10px 0;
            color: #4a4a4a;
            font-size: 14px;
            margin: 0;
            border-bottom: 1px solid #e5e5e5;
        }
        .available-coupons {
    margin-top: 20px;
    padding: 15px;
    border-top: 1px solid #eee;
}

.coupon-list {
    margin-top: 15px;
    max-height: 200px;  /* Fixed height for scrolling */
    overflow-y: auto;   /* Enable vertical scrolling */
    padding-right: 5px; /* Space for scrollbar */
}

/* Styling the scrollbar */
.coupon-list::-webkit-scrollbar {
    width: 6px;
}

.coupon-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.coupon-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.coupon-list::-webkit-scrollbar-thumb:hover {
    background: #555;
}

.coupon-card {
    border: 1px dashed #ddd;
    padding: 12px;
    margin-bottom: 10px;
    border-radius: 8px;
    background-color: #f9f9f9;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.coupon-card:hover {
    background-color: #f0f0f0;
    transform: translateX(5px);
}

.coupon-code {
    font-weight: bold;
    color: #2c3e50;
    padding: 5px 10px;
    background-color: #e8f4f8;
    border-radius: 4px;
    min-width: 100px;
    text-align: center;
}

.coupon-details {
    flex-grow: 1;
    padding: 0 15px;
}

.coupon-discount {
    color: #27ae60;
    font-weight: 600;
    margin: 0;
}

.coupon-min {
    color: #7f8c8d;
    font-size: 0.9em;
    margin: 3px 0;
}

.coupon-description {
    color: #666;
    font-size: 0.85em;
    margin: 0;
}

        .coupon-section {
            border-bottom: 1px solid #e5e5e5;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }

        .coupon-form {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
        position: relative;
    }

    .coupon-input {
        flex: 1;
        padding: 10px;
        border: 1px solid #e5e5e5;
        border-radius: 4px;
        font-size: 14px;
    }

    .coupon-btn {
        padding: 10px 20px;
        background: #000;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.3s;
    }

    .coupon-btn.remove-btn {
        background: #161616;
    }

    .coupon-btn:hover {
        background: #333;
    }

    .coupon-btn.remove-btn:hover {
        background: #090909;
    }

        .coupon-message {
            font-size: 14px;
            margin-top: 8px;
        }

        .coupon-message.success {
            color: #28a745;
        }

        .coupon-message.error {
            color: #dc3545;
        }


        .details-group:last-child {
            margin-bottom: 0;
        }

        .details-group:last-child .detail-value {
            border-bottom: none;
        }


        .delivery-info i {
            margin-right: 8px;
        }

        @media (max-width: 768px) {
            .order-summary-section {
                position: static;
            }

            .coupon-form {
                flex-direction: column;
            }

            .coupon-btn {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <div class="checkout-container">
        <h1 class="checkout-title">Checkout</h1>

        <div class="checkout-grid">
            <!-- Left Column -->
            <div class="main-content">
                <!-- Customer Details Section -->
                <div class="checkout-card">
                    <div class="section-heading">
                        <i class="fas fa-user"></i>
                        Customer Details
                    </div>

                    <div class="customer-details-display">
                        <div class="details-group">
                            <label>Full Name</label>
                            <p class="detail-value">
                                <%=user.username%>
                            </p>
                        </div>

                        <div class="details-group">
                            <label>Email</label>
                            <p class="detail-value">
                                <%=user.email%>
                            </p>
                        </div>

                        <div class="details-group">
                            <label>Phone Number</label>
                            <p class="detail-value">
                                <%=user.mobile || 'Not provided' %>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="checkout-card">
                    <div class="section-heading">
                        <i class="fas fa-map-marker-alt"></i>
                        Delivery Address
                    </div>

                    <%if(address && address.length> 0){%>
                        <%address.forEach((address,index)=>{%>
                            <div class="address-box <%=index ===0 ? 'selected' : '' %>">
                                <div class="address-content">
                                    <input type="radio" name="address" value="<%=address._id%>" <%=index===0 ? 'checked'
                                        : '' %>>
                                    <div class="address-details">
                                        <p class="name">
                                            <%=address.name%>
                                        </p>
                                        <p>
                                            <%=address.landMark%>
                                        </p>
                                        <p>
                                            <%=address.city%>,<%=address.state%>
                                                    <%=address.pincode%>
                                        </p>
                                        <p>Phone: <%= address.phone %>
                                        </p>
                                        <p>Alt Phone: <%= address.altPhone %>
                                        </p>
                                        <p class="address-type">
                                            <%= address.addressType %>
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <%})%>
                                <%}%>
                                    <a href="#" class="add-address-btn" onclick="showAddressForm()">+ Add New
                                        Address</a>
                                    <div id="add-address-form" class="address-box" style="display: none;">
                                        <h4>Add New Address</h4>
                                        <form id="address-form">
                                            <div class="form-group">
                                                <label for="address-type">Address Type</label>
                                                <input type="text" id="address-type" name="addressType">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-name">Name</label>
                                                <input type="text" id="address-name" name="name">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-landmark">LandMark</label>
                                                <input type="text" id="address-landmark" name="landmark">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-city">City</label>
                                                <input type="text" id="address-city" name="city">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-state">State</label>
                                                <input type="text" id="address-state" name="state">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-pincode">Pincode</label>
                                                <input type="text" id="address-pincode" name="pincode">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-phone">Phone</label>
                                                <input type="text" id="address-phone" name="phone">
                                            </div>
                                            <div class="form-group">
                                                <label for="address-altPhone">Alternate Phone (Optional)</label>
                                                <input type="text" id="address-altPhone" name="altPhone">
                                            </div>

                                            <button type="submit" class="btn btn-primary">Save Address</button>
                                            <button type="button" class="btn btn-secondary"
                                                onclick="hideAddressForm()">Cancel</button>
                                        </form>
                                    </div>
                </div>

                <!-- Payment Method Section -->
                <div class="checkout-card">
                    <div class="section-heading">
                        <i class="fas fa-credit-card"></i>
                        Payment Method
                    </div>

                    <div class="payment-methods">
                        <div class="payment-option selected">
                            <div class="payment-content">
                                <input type="radio" name="payment" value="WALLET" checked>
                                <i class="fas fa-credit-card payment-icon"></i>
                                <div class="payment-details">
                                    <p class="name">Wallet</p>
                                    <p class="description">Pay securely with your wallet</p>
                                </div>
                            </div>
                        </div>

                        <div class="payment-option">
                            <div class="payment-content">
                                <input type="radio" name="payment" value="RAZORPAY">
                                <i class="fas fa-mobile-alt payment-icon"></i>
                                <div class="payment-details">
                                    <p class="name">Pay with Razorpay</p>
                                    <p class="description">Razopay</p>
                                </div>
                            </div>
                        </div>

                        <div class="payment-option">
                            <div class="payment-content">
                                <input type="radio" name="payment" value="COD">
                                <i class="fas fa-money-bill-wave payment-icon"></i>
                                <div class="payment-details">
                                    <p class="name">Cash on Delivery</p>
                                    <p class="description">Pay when you receive</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="order-summary-section">
                <div class="checkout-card">
                    <!-- Coupon Section -->
                    <div class="coupon-section">
                        <div class="section-heading">
                            <i class="fas fa-tag"></i>
                            Apply Coupon
                        </div>
                        <div class="coupon-form">
                            <input type="text" id="coupon-code" placeholder="Enter coupon code" class="coupon-input">
                            <button id="applyCouponBtn" onclick="applyCoupon()" class="coupon-btn">Apply</button>
                            <button id="removeCouponBtn" style="display:none;" class="coupon-btn " onclick="removeCoupon()">Remove
                                Coupon</button>
                        </div>
                        <div id="coupon-message" class="coupon-message"></div>
                        <div class="available-coupons">
                            <div class="section-heading">
                                <i class="fas fa-ticket-alt"></i>
                                Available Coupons
                            </div>
                            <div class="coupon-list">
                                <% validCoupons.forEach(coupon => { %>
                                    <div class="coupon-card" onclick="applyCouponCode('<%=coupon.name%>')">
                                        <div class="coupon-code"><%=coupon.name%></div>
                                        <div class="coupon-details">
                                            <p class="coupon-discount">Save ₹<%=coupon.offerPrice%></p>
                                            <p class="coupon-min">Min. Order: ₹<%=coupon.minimumPrice%></p>
                                            <% if(coupon.description) { %>
                                                <p class="coupon-description"><%=coupon.description%></p>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        </div>`           

                    <div class="section-heading">Order Summary</div>
                    <%cart.items.forEach(item=>{%>

                        <div class="order-item">
                            <div class="order-details">
                                <h4>
                                    <%=item.productId.productName%>
                                </h4>
                                <p class="order-quantity">Quantity: <%=item.quantity%>
                                </p>
                                <p class="order-size">Size: <%= item.size %>
                                </p>
                            </div>
                            <div class="order-price">₹<%= item.totalPrice %>
                            </div>
                        </div>
                        <%})%>
                            <div class="order-summary">
                                <div class="summary-row">
                                    <span>Subtotal</span>
                                    <span id="subtotal">₹<%= subtotal %></span>
                                </div>
                                <div class="summary-row">
                                    <span>Shipping</span>
                                    <span>Free delivery</span>
                                </div>
                                <div class="summary-row" id="discount-row" style="display: none;">
                                    <span>Discount</span>
                                    <span>-₹<span id="discount-amount">0</span></span>
                                </div>
                                <div class="summary-row total">
                                    <span>Total</span>
                                    <span>₹<%= subtotal %></span>
                                </div>
                            </div>

                            <button class="place-order-btn" onclick="placeOrder()">Place Order</button>

                            <div class="delivery-info">
                                <i class="fas fa-truck"></i>
                                Estimated delivery: 5-7 business days
                            </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function showAddressForm() {
            document.getElementById('add-address-form').style.display = 'block';
        }

        function hideAddressForm() {
            document.getElementById('add-address-form').style.display = 'none';
        }

        function validateForm() {
            let isValid = true;
            const requiredFields = ["address-type", "address-name", "address-city", "address-landmark", "address-state", "address-pincode", "address-phone"];

            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();

                if (!inputValue) {
                    showError(input, 'This field is required.');
                    isValid = false;
                } else {
                    clearError(input);
                }
            });

            if (!isValid) return false;

            const formData = {
                addressType: document.getElementById('address-type').value,
                name: document.getElementById('address-name').value,
                city: document.getElementById('address-city').value,
                landMark: document.getElementById('address-landmark').value,
                state: document.getElementById('address-state').value,
                pincode: document.getElementById('address-pincode').value,
                phone: document.getElementById('address-phone').value,
                altPhone: document.getElementById('address-altPhone').value
            };

            const patterns = {
                name: /^[A-Za-z\s]+$/,
                pincode: /^\d{6}$/,
                phone: /^\d{10}$/
            };

            if (!patterns.name.test(formData.name)) {
                showSwalError('Name should contain alphabets only.');
                return false;
            }
            if (!patterns.name.test(formData.city)) {
                showSwalError('City should contain alphabets only.');
                return false;
            }
            if (!patterns.name.test(formData.landMark)) {
                showSwalError('Landmark should contain alphabets only.');
                return false;
            }
            if (!patterns.name.test(formData.state)) {
                showSwalError('State should contain alphabets only.');
                return false;
            }
            if (!patterns.pincode.test(formData.pincode)) {
                showSwalError('Pincode should be a 6-digit number.');
                return false;
            }
            if (!patterns.phone.test(formData.phone)) {
                showSwalError('Phone number should be a 10-digit number.');
                return false;
            }
            if (formData.altPhone && !patterns.phone.test(formData.altPhone)) {
                showSwalError('Alternate phone number should be a 10-digit number.');
                return false;
            }
            if (formData.altPhone && formData.phone === formData.altPhone) {
                showSwalError('Phone number and alternate phone number should be different.');
                return false;
            }

            return true;
        }

        function showError(input, message) {
            const errorId = `${input.id}-error`;
            let errorElement = document.getElementById(errorId);

            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.id = errorId;
                errorElement.className = 'text-danger';
                input.parentNode.appendChild(errorElement);
            }

            errorElement.textContent = message;
        }

        function clearError(input) {
            const errorElement = document.getElementById(`${input.id}-error`);
            if (errorElement) {
                errorElement.remove();
            }
        }

        function showSwalError(message) {
            Swal.fire({
                title: 'Error',
                text: message,
                icon: 'error'
            });
        }
 async function applyCoupon() {
    const couponCode = document.getElementById('coupon-code').value.trim();
    const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));
    const messageDiv = document.getElementById('coupon-message');
    const discountRow = document.getElementById('discount-row');
    const discountAmount = document.getElementById('discount-amount');
    const totalRow = document.querySelector('.summary-row.total span:last-child');
    const applyCouponBtn = document.getElementById('applyCouponBtn');
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    const couponInput = document.getElementById('coupon-code');

    if (!couponCode) {
        messageDiv.className = 'coupon-message error';
        messageDiv.textContent = 'Please enter a coupon code';
        return;
    }

    try {
        const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode, cartTotal: subtotal })
        });

        const data = await response.json();

        if (data.success) {
            messageDiv.className = 'coupon-message success';
            messageDiv.textContent = data.message;
            discountRow.style.display = 'flex';
            discountAmount.textContent = data.discount;
            totalRow.textContent = `₹${data.finalAmount}`;
            
            applyCouponBtn.style.display = 'none';
            removeCouponBtn.style.display = 'block';
            couponInput.disabled = true;

        } else {
            messageDiv.className = 'coupon-message error';
            messageDiv.textContent = data.message;
            discountRow.style.display = 'none';
            totalRow.textContent = `₹${subtotal}`;
            
            applyCouponBtn.style.display = 'block';
            removeCouponBtn.style.display = 'none';
            couponInput.disabled = false;
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        messageDiv.className = 'coupon-message error';
        messageDiv.textContent = 'Error applying coupon. Please try again.';
    }
}

async function removeCoupon() {
    const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));
    const messageDiv = document.getElementById('coupon-message');
    const discountRow = document.getElementById('discount-row');
    const totalRow = document.querySelector('.summary-row.total span:last-child');
    const applyCouponBtn = document.getElementById('applyCouponBtn');
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    const couponInput = document.getElementById('coupon-code');

    try {
        const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ removeCoupon: true, cartTotal: subtotal })
        });

        const data = await response.json();

        if (data.success) {
            messageDiv.className = 'coupon-message success';
            messageDiv.textContent = 'Coupon removed successfully';
            discountRow.style.display = 'none';
            totalRow.textContent = `₹${subtotal}`;
            
            applyCouponBtn.style.display = 'block';
            removeCouponBtn.style.display = 'none';
            couponInput.disabled = false;
            couponInput.value = '';

        } else {
            messageDiv.className = 'coupon-message error';
            messageDiv.textContent = data.message;
            discountRow.style.display = 'none';
            totalRow.textContent = `₹${subtotal}`;
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        messageDiv.className = 'coupon-message error';
        messageDiv.textContent = 'Error removing coupon. Please try again.';
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const discountRow = document.getElementById('discount-row');
    if (discountRow && discountRow.style.display === 'flex') {
        const applyCouponBtn = document.getElementById('applyCouponBtn');
        const removeCouponBtn = document.getElementById('removeCouponBtn');
        const couponInput = document.getElementById('coupon-code');
        
        applyCouponBtn.style.display = 'none';
        removeCouponBtn.style.display = 'block';
        couponInput.disabled = true;
    }
});


async function placeOrder() {
    const selectedAddress = document.querySelector('.address-box.selected input[type="radio"]');
    const selectedPayment = document.querySelector('.payment-option.selected input[type="radio"]');
    
    if (!selectedAddress || !selectedPayment) {
        showSwalError(!selectedAddress ? 'Please select a delivery address' : 'Please select a payment method');
        return;
    }

    const discountAmount = document.getElementById('discount-amount')?.textContent || '0';
    const finalAmount = document.querySelector('.summary-row.total span:last-child')?.textContent.replace('₹', '') || '0';

    try {
        if (selectedPayment.value === "RAZORPAY") {
            const orderData = {
                addressId: selectedAddress.value,
                paymentMethod: selectedPayment.value,
                discount: parseFloat(discountAmount),
                finalAmount: parseFloat(finalAmount)
            };

            const orderResponse = await fetch('/placeOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });

            const orderResult = await orderResponse.json();
            if (!orderResult.success || !orderResult.order) {
                showSwalError(orderResult.message || 'Failed to create order');
                return;
            }

            const options = {
                key: "rzp_test_YCiYkhBw22AhUw",
                amount: orderResult.order.amount,
                currency: "INR",
                name: "FashionKart",
                description: "Order Payment",
                order_id: orderResult.order.id,
                handler: async function(response) {
                    try {
                        const finalOrderData = {
                            ...orderData,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            paymentConfirmed: true
                        };

                        const confirmResponse = await fetch('/placeOrder', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(finalOrderData)
                        });

                        const result = await confirmResponse.json();
                        if (result.success) {
                            window.location.href = `/orderSuccess/${result.orderId}`;
                        } else {
                            showSwalError(result.message || 'Payment verification failed');
                        }
                    } catch (error) {
                        console.error('Payment confirmation error:', error);
                        showSwalError('Error confirming payment');
                    }
                },
                prefill: {
                    name: "User",
                    email: "user@example.com",
                    contact: "9999999999"
                },
                theme: { color: "#3399cc" }
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            const response = await fetch('/placeOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    addressId: selectedAddress.value,
                    paymentMethod: selectedPayment.value,
                    discount: parseFloat(discountAmount),
                    finalAmount: parseFloat(finalAmount)
                })
            });

            const data = await response.json();
            if (data.success) {
                window.location.href = `/orderSuccess/${data.orderId}`;
            } else {
                showSwalError(data.message || 'Error placing order');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        showSwalError(error.message,'Error processing order. Please try again.');
    }
}


        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.payment-option').forEach(option => {
                option.addEventListener('click', () => {
                    document.querySelectorAll('.payment-option').forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    option.querySelector('input[type="radio"]').checked = true;
                });
            });

            document.querySelectorAll('.address-box').forEach(box => {
                box.addEventListener('click', function () {
                    document.querySelectorAll('.address-box').forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');
                    this.querySelector('input[type="radio"]').checked = true;
                });
            });

            const addressForm = document.getElementById('address-form');
            if (addressForm) {
                addressForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!validateForm()) return;

                    const formData = {
                        name: document.getElementById('address-name').value,
                        phone: document.getElementById('address-phone').value,
                        landMark: document.getElementById('address-landmark').value,
                        city: document.getElementById('address-city').value,
                        state: document.getElementById('address-state').value,
                        pincode: document.getElementById('address-pincode').value,
                        altPhone: document.getElementById('address-altPhone').value,
                        addressType: document.getElementById('address-type').value
                    };

                    try {
                        const response = await fetch('/addAddress-checkout', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });

                        const data = await response.json();
                        if (data.success) {
                            hideAddressForm();
                            location.reload();
                        } else {
                            showSwalError('Error adding address: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showSwalError('Error adding address. Please try again.');
                    }
                });
            }
        });
    </script>