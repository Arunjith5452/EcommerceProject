<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OTP Verification</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f3f4f6;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .otp-container {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      text-align: center;
      width: 380px;
      padding-bottom: 70px;
    }

    .otp-container h2 {
      margin-bottom: 20px;
    }

    #otp-inputs {
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: nowrap;
      padding-bottom: 20px;
    }

    .otp-input {
      width: 50px;
      height: 50px;
      font-size: 18px;
      text-align: center;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .otp-input:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .resend-btn {
      margin-top: 10px;
      background-color: #c5cacf;
      color: #fff;
      border: none;
      padding: 10px;
      border-radius: 4px;
      cursor: pointer;
      display: inline-block;
    }

    .resend-btn:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .timer {
      margin: 10px 0;
      font-size: 14px;
      color: #555;
    }

    .btn {
      padding: 12px 20px;
      font-size: 16px;
      font-weight: bold;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      width: 70%;
    }

    .btn-primary {
      background-color: #28a745;
      color: #fff;
      transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #218838;
    }

    .btn-secondary {
      background-color: #ccc;
      color: #000;
      padding: 8px 16px;
      font-size: 14px;
    }

    .help-text {
      font-size: 14px;
      margin-bottom: 20px;
      color: #777;
      padding-top: 15px;
    }

    .help-text a {
      color: red;
      text-decoration: none;
      cursor: pointer;
    }

    .help-text a:hover {
      text-decoration: underline;
    }
  </style>
</head>

<body>
  <div class="otp-container">
    <h2>OTP Verification Code</h2>
    <form action="/verify-otp" method="POST" id="otp-form" onsubmit="return validateOTP()">
      <div id="otp-inputs">
        <input type="text" maxlength="1" class="otp-input" id="otp1" name="otp1" required>
        <input type="text" maxlength="1" class="otp-input" id="otp2" name="otp2" required>
        <input type="text" maxlength="1" class="otp-input" id="otp3" name="otp3" required>
        <input type="text" maxlength="1" class="otp-input" id="otp4" name="otp4" required>
        <input type="text" maxlength="1" class="otp-input" id="otp5" name="otp5" required>
        <input type="text" maxlength="1" class="otp-input" id="otp6" name="otp6" required>
      </div>
      <button type="submit" class="btn btn-primary">Verify OTP</button>
    </form>
    <div class="timer" id="timer">Resend OTP in 30 seconds</div>
    <button class="resend-btn" id="resend-btn" disabled>Resend OTP</button>
  </div>

  <script>
    // Get DOM elements
    let timerElement = document.getElementById('timer');
    let resendButton = document.getElementById('resend-btn');
    let timer = 30;
    let interval;

    // Get all OTP input elements
    const otpInputs = document.querySelectorAll('.otp-input');

    function startTimer() {
      // Clear any existing interval first
      if (interval) {
        clearInterval(interval);
      }

      resendButton.disabled = true;
      timer = 30;  // Reset timer

      interval = setInterval(() => {
        timer--;
        timerElement.textContent = `Resend OTP in ${timer} seconds`;

        if (timer === 0) {
          clearInterval(interval);
          timerElement.textContent = "You can resend the OTP now.";
          resendButton.disabled = false;
        }
      }, 1000);
    }

    async function resendOTP() {
      try {
        resendButton.disabled = true;
        resendButton.textContent = "Sending...";

        const response = await $.ajax({
          type: "POST",
          url: "/resendotp",
          contentType: "application/json"
        });

        if (response.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Resent',
            text: 'A new OTP has been sent to your registered email.'
          });
          startTimer();  // Restart timer
        } else {
          throw new Error(response.message || 'Failed to resend OTP');
        }
      } catch (error) {
        console.error('Error resending OTP:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to resend OTP. Please try again.'
        });
        resendButton.disabled = false;
      } finally {
        resendButton.textContent = "Resend OTP";
      }
    }

    // Add input handling for each OTP input box
    otpInputs.forEach((input, index) => {
      // Handle input changes
      input.addEventListener('input', (e) => {
        // Allow only numbers
        input.value = input.value.replace(/[^0-9]/g, '');
        
        // Auto focus next input when a number is entered
        if (input.value && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
        
        // Check if all inputs are filled
        if (isOTPComplete()) {
          document.querySelector('.btn-primary').focus();
        }
      });

      // Handle keydown events
      input.addEventListener('keydown', (e) => {
        // Handle backspace
        if (e.key === 'Backspace' || e.key === 'Delete') {
          if (input.value === '') {
            // Move to previous input if current is empty
            if (index > 0) {
              e.preventDefault();
              otpInputs[index - 1].value = '';
              otpInputs[index - 1].focus();
            }
          } else {
            // Clear current input
            input.value = '';
          }
        }
        
      });

    });

    // Function to check if OTP is complete
    function isOTPComplete() {
      return [...otpInputs].every(input => input.value.length === 1);
    }

    function validateOTP() {
      let otpInput = "";
      otpInputs.forEach(input => {
        otpInput += input.value;
      });

      $.ajax({
        type: "POST",
        url: "/verify-otp",
        data: { otp: otpInput },
        success: function(response) {
          if (response.success) {
            Swal.fire({
              icon: 'success',
              title: 'OTP Verified',
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              window.location.href = response.redirectUrl;
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Invalid OTP',
              text: 'Please enter the correct OTP'
            });
          }
        },
        error: function() {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Invalid OTP'
          });
        }
      });
      return false;
    }

    // Initialize timer and focus first input on page load
    document.addEventListener('DOMContentLoaded', () => {
      startTimer();
      otpInputs[0].focus();
    });

    // Add event listener to resend button
    resendButton.addEventListener('click', resendOTP);
  </script>
</body>
</html>