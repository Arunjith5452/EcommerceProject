<%- include("../../views/partials/user/header") %>
  <title>User Profile</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Main Styles */
    body {
      background-color: #f8f9fa;
    }

    .main {
      padding: 30px 0;
      min-height: 100vh;
    }

    /* Dashboard Menu */
    .dashboard-menu {
      background-color: white;
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    }

    .dashboard-menu .nav-link {
      padding: 12px 20px;
      margin-bottom: 8px;
      border-radius: 8px;
      font-weight: 500;
      color: #4a5568;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
    }

    .dashboard-menu .nav-link i {
      margin-right: 12px;
      font-size: 1.2em;
    }

    .dashboard-menu .nav-link:hover {
      background-color: #f7fafc;
      color: #2b6cb0;
      transform: translateX(5px);
    }

    .dashboard-menu .nav-link.active {
      background-color: #ebf8ff;
      color: #2b6cb0;
      font-weight: 600;
    }

    /* Cards */
    .card {
      border: none;
      border-radius: 15px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
      transition: transform 0.3s ease;
      margin-bottom: 20px;
    }

    .card:hover {
      transform: translateY(-5px);
    }

    .card-header {
      background-color: white;
      border-bottom: 1px solid #e2e8f0;
      padding: 20px;
      border-radius: 15px 15px 0 0 !important;
    }

    .card-green {
      background-color: #f0f9ff;
    }

    /* Profile Section */
    .profile-card {
      text-align: center;
      padding: 30px;
    }

    .profile-avatar {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      margin: 0 auto 20px;
      border: 5px solid #ebf8ff;
      background-color: #e2e8f0;
    }

    .profile-stats {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 90px;
      margin: 25px 0;
      margin-left: 165px;
    }

    .stat-item {
      padding: 15px;
      background-color: white;
      border-radius: 10px;
      text-align: center;
    }

    .stat-value {
      font-size: 24px;
      font-weight: 600;
      color: #2b6cb0;
    }

    .stat-label {
      color: #718096;
      font-size: 14px;
    }

    /* Buttons */
    .btn {
      padding: 8px 20px;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-success {
      background-color: #48bb78;
      border-color: #48bb78;
    }

    .btn-success:hover {
      background-color: #38a169;
      border-color: #38a169;
      transform: translateY(-2px);
    }

    .btn-small {
      padding: 5px 15px;
      font-size: 14px;
    }

    /* Tables */
    .table {
      margin: 0;
    }

    .table th {
      border-top: none;
      font-weight: 600;
      color: #4a5568;
      padding: 16px;
    }

    .table td {
      padding: 16px;
      color: #718096;
      vertical-align: middle;
    }

    /* Breadcrumb */
    .breadcrumb-wrap {
      background-color: #f7fafc;
      /* Light background */
      padding: 20px 0;
      /* Adjusted padding */
      margin-bottom: 30px;
      border-bottom: 2px solid #e2e8f0;
    }

    .breadcrumb {
      margin: 0;
      display: flex;
      align-items: center;
      font-family: 'Poppins', sans-serif;
    }

    .breadcrumb a {
      color: #2b6cb0;
      /* Blue color for links */
      text-decoration: none;
      font-weight: 500;
      margin-right: 8px;
    }

    .breadcrumb span {
      color: #718096;
      /* Lighter gray color for separators */
      margin: 0 8px;
      font-weight: 500;
    }

    .breadcrumb a:hover {
      color: #1e4b81;
      /* Darker blue on hover */
      text-decoration: underline;
    }

    /* Address Cards */
    .address-card {
      padding: 20px;
      border-radius: 10px;
      background-color: white;
      margin-bottom: 20px;
      position: relative;
    }

    .address-type {
      position: absolute;
      top: 15px;
      right: 15px;
      padding: 4px 12px;
      background-color: #ebf8ff;
      color: #2b6cb0;
      border-radius: 20px;
      font-size: 12px;
    }

    .order-id {
      font-size: 1.2em;
      font-weight: bold;
    }

    .ordered-items-list {
      list-style-type: none;
      padding-left: 0;
      margin: 0;
    }

    .ordered-item {
      display: flex;
      align-items: center;
      border-bottom: 1px solid #ddd;
      padding: 10px 0;
      margin-bottom: 10px;
    }

    .item-image-container {
      width: 60px;
      height: 60px;
      overflow: hidden;
      margin-right: 15px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .item-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .no-image {
      color: #888;
      font-size: 14px;
      font-style: italic;
    }

    .item-details {
      flex-grow: 1;
    }

    .item-name {
      font-weight: bold;
      font-size: 1em;
    }

    .item-size,
    .item-quantity,
    .item-price {
      font-size: 0.9em;
      color: #555;
    }

    .total-amount {
      font-weight: bold;
      margin-top: 20px;
      font-size: 1.1em;
    }

    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
      line-height: 1.5;
      border-radius: -90.8rem;
      margin-bottom: 1px;
    }

    .gap-2 {
      gap: 0.5rem !important;
    }

    .table td {
      vertical-align: middle;
    }

    .badge {
      padding: 0.5em 0.75em;
    }

    .products-cell {
      max-width: 300px;
      padding: 10px 15px !important;
    }

    .product-name {
      padding: 2px 0;
      color: #4a5568;
      font-size: 0.9rem;
      line-height: 1.4;
      border-bottom: 1px solid #edf2f7;
    }

    .product-name:last-child {
      border-bottom: none;
    }

    /* Table Styles */
    .table td {
      vertical-align: middle;
    }

    .table th {
      background-color: #f8f9fa;
      font-weight: 600;
    }

    .stat-item {
      padding: 15px;
      border-radius: 8px;
      background-color: #f8f9fa;
    }

    .stat-value {
      font-size: 24px;
      font-weight: bold;
      color: #0d6efd;
    }

    .stat-label {
      color: #6c757d;
      font-size: 14px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .products-cell {
        max-width: 200px;
      }

      .product-name {
        font-size: 0.85rem;
      }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .profile-stats {
        grid-template-columns: repeat(2, 1fr);
      }

      .dashboard-menu {
        margin-bottom: 20px;
      }
    }
  </style>
  </head>

  <body>

    <main class="main">
      <div class="page-header breadcrumb-wrap">
        <div class="container">
          <div class="breadcrumb">
            <a href="/">Home</a>
            <span></span> Profile <span></span>
          </div>
        </div>
      </div>

      <section class="pt-3 pb-3">
        <div class="container">
          <div class="row">
            <div class="col-lg-10 m-auto">
              <div class="row">
                <!-- Dashboard Menu -->
                <div class="col-md-4">
                  <div class="dashboard-menu">
                    <ul class="nav flex-column" role="tablist">
                      <li class="nav-item">
                        <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard">
                          <i class="fas fa-tachometer-alt"></i>Dashboard
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address">
                          <i class="fas fa-map-marker-alt"></i>My Address
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders">
                          <i class="fas fa-shopping-bag"></i>Orders
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#wallet">
                          <i class="fas fa-wallet"></i>Wallet Status
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" id="wallet-history-tab" data-bs-toggle="tab" href="#wallet-history">
                          <i class="fas fa-history"></i>Wallet History
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" id="referral-tab" data-bs-toggle="tab" href="#referral">
                          <i class="fas fa-user-friends"></i>Referrals
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" href="/logout">
                          <i class="fas fa-sign-out-alt"></i>Logout
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>

                <div class="col-md-8">
                  <div class="tab-content dashboard-content">
                    <!-- Dashboard Tab -->
                    <div class="tab-pane fade show active" id="dashboard">
                      <div class="card">
                        <div class="card-header">
                          <h5 class="mb-0">User Profile</h5>
                        </div>
                        <div class="card-body text-center">
                          <h5 class="mb-4">
                            <%=user.username%>
                          </h5>
                          <p class="text-muted mb-2"><strong>Phone:</strong>
                            <%=user.mobile%>
                          </p>
                          <p class="text-muted"><strong>Email:</strong>
                            <%=user.email%>
                          </p>

                          <div class="profile-stats">
                            <div class="stat-item">
                              <%if(orders && orders.length> 0){%>
                                <div class="stat-value">
                                  <%=orders.length%>
                                </div>
                                <div class="stat-label">Orders</div>
                                <%}else{%>
                                  <div class="stat-value">0</div>
                                  <div class="stat-label">Orders</div>
                                  <%}%>
                            </div>
                            <%if(user.wallet> 0){%>
                              <div class="stat-item">
                                <div class="stat-value">₹<%=user.wallet%>
                                </div>
                                <div class="stat-label">Wallet</div>
                              </div>
                              <%}else{%>
                                <div class="stat-item">
                                  <div class="stat-value">₹0</div>
                                  <div class="stat-label">Wallet</div>
                                </div>
                                <%}%>
                          </div>

                          <div class="d-flex justify-content-center gap-2">
                            <a href="/change-email" class="btn btn-success">Change Email</a>
                            <a href="/change-password" class="btn btn-success">Change Password</a>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Address Tab -->
                    <div class="tab-pane fade" id="address">
                      <div class="card">
                        <div class="card-header">
                          <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">My Addresses</h5>
                            <a href="/addAddress" class="btn btn-primary">Add New</a>
                          </div>
                        </div>
                        <div class="card-body">
                          <div class="row">
                            <%if(userAddress){%>
                              <%userAddress.address.forEach((address)=>{%>
                                <div class="col-12">
                                  <div class="address-card">
                                    <span class="address-type">
                                      <%=address.addressType%>
                                    </span>
                                    <h6 class="mb-2">
                                      <%=address.name%>
                                    </h6>
                                    <p class="mb-1">
                                      <%=address.city%>, <%=address.state%>
                                    </p>
                                    <p class="mb-1">
                                      <%=address.landMark%>
                                    </p>
                                    <p class="mb-2">PIN: <%=address.pincode%>
                                    </p>
                                    <p class="mb-3">
                                      Primary Phone: <%=address.phone%>
                                        <% if(address.altPhone) { %>
                                          <br>Alternate Phone: <%=address.altPhone%>
                                            <% } %>
                                    </p>
                                    </p>
                                    <div class="d-flex gap-2">
                                      <a href="/editAddress?id=<%=address._id%>" class="btn btn-sm btn-primary">Edit</a>
                                      <a href="javascript:void(0)" class="btn btn-sm btn-danger"
                                        onclick="confirmDelete('<%=address._id%>')">Delete</a>
                                    </div>
                                  </div>
                                </div>
                                <%})%>
                                  <%}else{%>
                                    <div class="col-12 text-center py-5">
                                      <i class="fas fa-map-marker-alt fa-3x mb-3 text-muted"></i>
                                      <h5 class="text-muted">No addresses found</h5>
                                      <a href="/addAddress" class="btn btn-primary mt-3">Add Address</a>
                                    </div>
                                    <%}%>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Orders Tab -->
                    <div class="tab-pane fade" id="orders">
                      <div class="card">
                        <div class="card-header">
                          <h5 class="mb-0">My Orders</h5>
                        </div>
                        <div class="card-body">
                          <% if (orders && orders.length> 0) { %>
                            <div class="row">
                              <% orders.forEach(order=> { %>
                                <div class="col-12 mb-3">
                                  <div class="card">
                                    <div class="card-body">
                                      <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h6 class="mb-0">Order #<%=order.orderId.slice(0,8)%>
                                        </h6>
                                        <span class="badge rounded-pill 
                      <% if(order.status === 'Pending') { %>bg-warning
                      <% } else if(order.status === 'Processing') { %>bg-info
                      <% } else if(order.status === 'Shipped') { %>bg-primary
                      <% } else if(order.status === 'Delivered') { %>bg-success
                      <% } else if(order.status === 'Cancelled') { %>bg-danger
                      <% } else if(order.status === 'Return Request') { %>bg-secondary
                      <% } else if(order.status === 'Returned') { %>bg-dark<% } %>">
                                          <%= order.status %>
                                        </span>
                                      </div>

                                      <div class="row">
                                        <div class="col-md-8">
                                          <h6>Products:</h6>
                                          <% order.orderedItems.forEach(item=> { %>
                                            <div class="d-flex align-items-center mb-2">
                                              <div class="me-3" style="width: 50px; height: 50px; overflow: hidden;">
                                                <% if(item.product.productImage && item.product.productImage.length> 0)
                                                  { %>
                                                  <img src="/uploads/product-images/<%=item.product.productImage[0]%>"
                                                    alt="<%=item.product.productName%>" class="img-fluid">
                                                  <% } %>
                                              </div>
                                              <div>
                                                <span>
                                                  <%=item.product.productName%>
                                                </span><br>
                                                <small class="text-muted">Size: <%=item.size%>, Qty: <%=item.quantity%>
                                                </small>
                                              </div>
                                            </div>
                                            <% }); %>
                                              <span>Payment method:<%=order.paymentMethod%></span>
                                        </div>
                                        <div class="col-md-4 text-end">
                                          <p class="mb-1"><strong>Date:</strong>
                                            <%=new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric' ,
                                              month: 'short' , day: 'numeric' })%>
                                          </p>
                                          <h5 class="mb-3">
                                            <% let displayAmount; const activeItems=order.orderedItems.filter(item=>
                                              item.status !== 'Cancelled' && item.status !== 'Returned'
                                              );

                                              if (activeItems.length === 0) {
                                              const originalTotal = order.originalTotalPrice ||
                                              order.orderedItems.reduce((total, item) => total + (item.price *
                                              item.quantity), 0);
                                              const originalDiscount = order.originalDiscount || order.discount || 0;
                                              displayAmount = Math.round(originalTotal - originalDiscount);
                                              } else {
                                              const currentTotalMRP = activeItems.reduce((total, item) =>
                                              total + (item.price * item.quantity), 0);
                                              const totalMRP = order.originalTotalPrice ||
                                              order.orderedItems.reduce((total, item) => total + (item.price *
                                              item.quantity), 0);
                                              const currentDiscount = Math.round(order.discount * (currentTotalMRP /
                                              totalMRP)) || 0;
                                              displayAmount = Math.round(currentTotalMRP - currentDiscount);
                                              }
                                              %>
                                              ₹<%= !isNaN(displayAmount) ? displayAmount : '0' %>
                                          </h5>
                                          <div class="d-flex flex-column gap-2">
                                            <button class="btn btn-sm btn-primary"
                                              onclick="viewOrderDetails('<%= order.orderId %>')" data-bs-toggle="modal"
                                              data-bs-target="#orderModal">
                                              View Details
                                            </button>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <% }); %>
                            </div>
                            <% } else { %>
                              <div class="text-center py-5">
                                <i class="fas fa-shopping-bag fa-3x mb-3 text-muted"></i>
                                <h6 class="text-muted">No orders found</h6>
                              </div>
                              <% } %>
                        </div>
                      </div>
                    </div>

                    <!-- Order Details Modal -->
                    <div class="modal fade" id="orderModal" tabindex="-1">
                      <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title">Order Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                          </div>
                          <div class="modal-body" id="orderDetailsContent">
                            <!-- Dynamic order details will be populated here -->
                          </div>
                        </div>
                      </div>
                    </div>
                    <!-- Wallet Status Tab -->
                    <div class="tab-pane fade" id="wallet">
                      <div class="card">
                        <div class="card-header">
                          <h5 class="mb-0">Wallet Status</h5>
                        </div>
                        <div class="card-body">
                          <div class="text-center py-4">
                            <div class="mb-4">
                              <i class="fas fa-wallet fa-3x text-primary"></i>
                            </div>
                            <h3 class="mb-2">₹<%= user.wallet%>
                            </h3>
                            <p class="text-muted">Current Balance</p>
                            <!-- <button class="btn btn-primary mt-3">Add Money</button> -->
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Wallet History Tab -->
                    <div class="tab-pane fade" id="wallet-history">
                      <div class="card">
                        <div class="card-header">
                          <h5 class="mb-0">Transaction History</h5>
                        </div>
                        <div class="card-body">
                          <div class="table-responsive">
                            <table class="table">
                              <thead>
                                <tr>
                                  <th>Transaction ID</th>
                                  <th>Date</th>
                                  <th>Type</th>
                                  <th>Amount</th>
                                  <th>Status</th>
                                </tr>
                              </thead>
                              <tbody>
                                <% if (user.walletHistory && user.walletHistory.length> 0) { %>
                                  <% user.walletHistory.forEach(transaction=> { %>
                                    <tr>
                                      <td>
                                        <%= transaction.transactionId %>
                                      </td>
                                      <td>
                                        <%= new Date(transaction.date).toLocaleDateString() %>
                                      </td>
                                      <td>
                                        <span
                                          class="badge <%= transaction.type === 'credit' ? 'bg-success' : 'bg-danger' %>">
                                          <%= transaction.type.toUpperCase() %>
                                        </span>
                                      </td>
                                      <td>₹<%= transaction.amount%>
                                      </td>
                                      <td>
                                        <span class="badge bg-success">Completed</span>
                                      </td>
                                    </tr>
                                    <% }) %>
                                      <% } else { %>
                                        <tr>
                                          <td class="text-center text-muted" colspan="5">
                                            <i class="fas fa-history fa-3x mb-3"></i>
                                            <h6>No transactions found</h6>
                                          </td>
                                        </tr>
                                        <%}%>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    </div>
                    <!-- Referrals Tab -->
                    <!-- Referrals Tab -->
                    <div class="tab-pane fade" id="referral">
                      <div class="card">
                        <div class="card-header">
                          <h5 class="mb-0">My Referrals</h5>
                        </div>
                        <div class="card-body">
                          <div class="text-center py-4">
                            <div class="mb-4">
                              <i class="fas fa-user-friends fa-3x text-primary"></i>
                            </div>
                            <h6 class="mb-3">Your Referral Code</h6>
                            <div class="d-flex justify-content-center align-items-center gap-2 mb-4">
                              <input type="text" id="referralCodeInput" class="form-control text-center"
                                style="max-width: 200px" value="<%= user.referralCode %>" readonly>
                              <button class="btn btn-primary btn-small" onclick="copyReferralCode()">Copy</button>
                            </div>
                            <div class="row justify-content-center">
                              <div class="col-md-6">
                                <div class="stat-item mb-3">
                                  <div class="stat-value">
                                    <%= user.referrals ? user.referrals.length : 0 %>
                                  </div>
                                  <div class="stat-label">Total Referrals</div>
                                </div>
                              </div>
                              <div class="col-md-6">
                                <div class="stat-item">
                                  <div class="stat-value">₹<%= user.referralEarnings || 0 %>
                                  </div>
                                  <div class="stat-label">Total Earnings</div>
                                </div>
                              </div>
                            </div>

                            <!-- Referred Users List -->
                            <% if (user.referrals && user.referrals.length> 0) { %>
                              <div class="mt-4">
                                <h6 class="mb-3">Referred Users</h6>
                                <div class="table-responsive">
                                  <table class="table">
                                    <thead>
                                      <tr>
                                        <th>Username</th>
                                        <th>Joined Date</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <% user.referrals.forEach(referral=> { %>
                                        <tr>
                                          <td>
                                            <%= referral.username %>
                                          </td>
                                          <td>
                                            <%= new Date(referral.createdAt).toLocaleDateString() %>
                                          </td>
                                        </tr>
                                        <% }) %>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                              <% } %>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Add this script at the bottom of your profile page -->
                    <script>
                      function copyReferralCode() {
                        const referralInput = document.getElementById('referralCodeInput');
                        referralInput.select();
                        document.execCommand('copy');

                        // Show tooltip or alert
                        alert('Referral code copied to clipboard!');
                      }
                    </script>

                  </div>
                </div>
              </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script src="https://kit.fontawesome.com/a-valid-fontawesome-kit-code.js" crossorigin="anonymous"></script>
            <script>
              function viewOrderDetails(orderId) {
                fetch(`/orderDetails/${orderId}`)
                  .then(response => response.json())
                  .then(order => {
                    const totalMRP = order.originalTotalPrice || order.orderedItems.reduce((total, item) =>
                      total + (item.price * item.quantity), 0);

                    let priceDetailsHTML = '';

                    const hasModifiedItems = order.orderedItems.some(item =>
                      item.status === 'Cancelled' ||
                      item.status === 'Returned'
                    );

                    if (hasModifiedItems) {
                      const activeItems = order.orderedItems.filter(item =>
                        item.status !== 'Cancelled' &&
                        item.status !== 'Returned'
                      );

                      if (activeItems.length === 0) {
                        priceDetailsHTML = `
                        <div class="card mt-3">
                            <div class="card-body">
                                <h6>Price Details</h6>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Total MRP</span>
                                    <span>₹${totalMRP}</span>
                                </div>
                                ${order.discount > 0 ? `
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Discount</span>
                                        <span class="text-success">-₹${order.discount}</span>
                                    </div>
                                ` : ''}
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <strong>Total Amount</strong>
                                    <strong>₹${totalMRP - order.discount}</strong>
                                </div>
                            </div>
                        </div>`;
                      } else {
                        const currentTotalMRP = activeItems.reduce((total, item) =>
                          total + (item.price * item.quantity), 0);
                        const currentDiscount = order.discount * (currentTotalMRP / totalMRP) || 0;

                        priceDetailsHTML = `
                        <div class="card mt-3">
                            <div class="card-body">
                                <div class="row">
                                 <div class="col-md-6">
    <h6>Current Price Details</h6>
    <div class="d-flex justify-content-between mb-2">
        <span>Total MRP</span>
        <span>₹${currentTotalMRP}</span>
    </div>
    ${currentDiscount > 0 ? `
        <div class="d-flex justify-content-between mb-2">
            <span>Discount</span>
            <span class="text-success">-₹${Math.round(currentDiscount)}</span>
        </div>
    ` : ''}
    <hr>
    <div class="d-flex justify-content-between">
        <strong>Total Amount</strong>
        <strong>₹${Math.round(currentTotalMRP - currentDiscount)}</strong>
    </div>
</div>
                                </div>
                            </div>
                        </div>`;
                      }
                    } else {
                      priceDetailsHTML = `
                    <div class="card mt-3">
                        <div class="card-body">
                            <h6>Price Details</h6>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Total MRP</span>
                                <span>₹${totalMRP}</span>
                            </div>
                            ${order.discount > 0 ? `
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Discount</span>
                                    <span class="text-success">-₹${order.discount}</span>
                                </div>
                            ` : ''}
                            <hr>
                            <div class="d-flex justify-content-between">
                                <strong>Total Amount</strong>
                                <strong>₹${totalMRP - order.discount}</strong>
                            </div>
                        </div>
                    </div>`;
                    }
                    let orderDetailsHTML = `

                <div class="order-details-container">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="order-id mb-0">Order ID: #${order.orderId.slice(0, 8)}</h5>
                    <span class="badge rounded-pill ${getStatusBadgeClass(order.status)}">${order.status}</span>
                </div>
                <p><strong>Placed on:</strong> ${new Date(order.createdOn).toLocaleDateString()}</p>
                
       // Already exists in the code you provided
${order.paymentStatus === 'FAILED' ? `
    <div class="alert alert-warning mt-3">
        <p class="mb-2"><strong>Payment Status:</strong> Failed</p>
        <p class="mb-2"><strong>Reason:</strong> ${order.paymentFailureReason || 'Payment verification failed'}</p>
        <button class="btn btn-primary mt-2" onclick="retryPaymentForOrder('${order._id}', ${order.finalAmount})">
            Retry Payment
        </button>
    </div>
` : ''}
                
                <div class="ordered-items-list">
                    ${order.orderedItems.map(item => {
                        const itemStatus = item.status || order.status;
                        const itemTotal = item.price * item.quantity;

                      return `
                                <div class="card mb-3" data-product-id="${item.product._id}">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3" style="width: 80px; height: 80px; overflow: hidden;">
                                                    ${item.product.productImage && item.product.productImage.length > 0 ?
                          `<img src="/uploads/product-images/${item.product.productImage[0]}" 
                                                            alt="${item.product.productName}" 
                                                            class="img-fluid rounded">` :
                          `<div class="no-image rounded bg-light d-flex align-items-center justify-content-center" 
                                                            style="height: 100%">
                                                            <i class="fas fa-image text-muted"></i>
                                                        </div>`
                        }
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">${item.product.productName}</h6>
                                                    <p class="mb-1 text-muted">Size: ${item.size}</p>
                                                    <p class="mb-1">Quantity: ${item.quantity}</p>
                                                     <p class="mb-0">Price: ₹${item.price}</p>
                                                </div>
                                            </div>
                                            <div class="text-end">
                                                <p class="mb-2"><strong>Status:</strong> 
                                                    <span class="badge ${getStatusBadgeClass(itemStatus)} item-status-badge">
                                                        ${itemStatus}
                                                    </span>
                                                </p>
                                                ${getActionButton(order, item, itemStatus)}
                                            </div>
                                        </div>
                                    </div>
                                </div>`;
                    }).join('')}
                    </div>
                    
                    ${priceDetailsHTML}
                </div>`;

                    document.getElementById('orderDetailsContent').innerHTML = orderDetailsHTML;
                    setupStatusUpdateListener(orderId);
                  })
                  .catch(error => {
                    console.error('Error fetching order details:', error);
                    Swal.fire('Error!', 'Failed to load order details', 'error');
                  });
              }

              function getStatusBadgeClass(status) {
                switch (status.toLowerCase()) {
                  case 'pending':
                    return 'bg-warning';
                  case 'processing':
                    return 'bg-info';
                  case 'shipped':
                    return 'bg-primary';
                  case 'delivered':
                    return 'bg-success';
                  case 'cancelled':
                    return 'bg-danger';
                  case 'return request':
                    return 'bg-secondary';
                  case 'returned':
                    return 'bg-dark';
                  default:
                    return 'bg-secondary';
                }
              }

              function getActionButton(order, item, itemStatus) {
                if (itemStatus === 'Delivered' && !['Returned', 'Return Request'].includes(item.status || order.status)) {
                  return `<button class="btn btn-sm btn-warning return-button" onclick="requestReturn('${order.orderId}', '${item.product._id}')">Return</button>`;
                }
                else if (['Processing', 'Pending'].includes(itemStatus)) {
                  return `<button class="btn btn-sm btn-danger cancel-button" onclick="cancelSingleProduct('${order.orderId}', '${item.product._id}', this)">Cancel</button>`;
                }
                return '';
              }


              function setupStatusUpdateListener(orderId) {
                const statusCheckInterval = setInterval(() => {
                  fetch(`/orderDetails/${orderId}`)
                    .then(response => response.json())
                    .then(order => {
                      const mainStatusBadge = document.querySelector('.order-details-container .badge');
                      if (mainStatusBadge) {
                        mainStatusBadge.className = `badge rounded-pill ${getStatusBadgeClass(order.status)}`;
                        mainStatusBadge.textContent = order.status;
                      }

                      order.orderedItems.forEach(item => {
                        const itemCard = document.querySelector(`[data-product-id="${item.product._id}"]`);
                        if (itemCard) {
                          const itemStatus = item.status || order.status;
                          const statusBadge = itemCard.querySelector('.item-status-badge');
                          const actionContainer = itemCard.querySelector('.action-button-container');

                          if (statusBadge) {
                            statusBadge.className = `badge ${getStatusBadgeClass(itemStatus)} item-status-badge`;
                            statusBadge.textContent = itemStatus;
                          }

                          if (actionContainer) {
                            actionContainer.innerHTML = getActionButton(order, item, itemStatus);
                          }
                        }
                      });
                    })
                    .catch(error => console.error('Error updating status:', error));
                }, 5000);

                const orderModal = document.getElementById('orderModal');
                orderModal.addEventListener('hidden.bs.modal', () => {
                  clearInterval(statusCheckInterval);
                });
              }



              function cancelSingleProduct(orderId, productId, buttonElement) {
                const cancelReasons = [
                  'Ordered by Mistake',
                  'Delayed Delivery',
                  'Product Not Needed',
                  'Found Better Price',
                  'Changed Mind',
                  'Other'
                ];

                Swal.fire({
                  title: 'Select Cancellation Reason',
                  input: 'select',
                  inputOptions: cancelReasons.reduce((acc, reason) => {
                    acc[reason] = reason;
                    return acc;
                  }, {}),
                  inputPlaceholder: 'Select a reason',
                  showCancelButton: true,
                  confirmButtonText: 'Next',
                  cancelButtonText: 'Cancel',
                  inputValidator: (value) => {
                    return new Promise((resolve) => {
                      if (value) {
                        resolve();
                      } else {
                        resolve('You need to select a reason');
                      }
                    });
                  }
                }).then((reasonResult) => {
                  if (reasonResult.isConfirmed) {
                    let selectedReason = reasonResult.value;

                    if (selectedReason === 'Other') {
                      return Swal.fire({
                        title: 'Enter Cancellation Reason',
                        input: 'textarea',
                        inputPlaceholder: 'Explain your reason for cancellation...',
                        inputValidator: (value) => {
                          if (!value) {
                            return 'You need to enter a reason';
                          }
                        }
                      }).then((otherReasonResult) => {
                        if (otherReasonResult.isConfirmed) {
                          selectedReason = otherReasonResult.value;
                          return proceedWithCancellation(selectedReason);
                        }
                      });
                    }

                    return proceedWithCancellation(selectedReason);
                  }
                });

                function proceedWithCancellation(selectedReason) {
                  Swal.fire({
                    title: 'Confirm Cancellation',
                    text: `Are you sure you want to cancel this product? Reason: ${selectedReason}`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                  }).then((confirmResult) => {
                    if (confirmResult.isConfirmed) {
                      if (buttonElement) {
                        buttonElement.disabled = true;
                      }

                      fetch(`/cancelSingleProduct/${orderId}`, {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          productId,
                          cancelReason: selectedReason
                        })
                      })
                        .then(response => response.json())
                        .then(data => {
                          if (data.success) {
                            const itemCard = buttonElement.closest('.card');
                            if (itemCard) {
                              const statusBadge = itemCard.querySelector('.badge');
                              if (statusBadge) {
                                statusBadge.className = 'badge bg-danger';
                                statusBadge.textContent = 'Cancelled';
                              }
                              buttonElement.remove();

                              const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                              if (orderCard) {
                                const totalElement = orderCard.querySelector('.order-total');
                                if (totalElement) {
                                  const newTotal = parseFloat(totalElement.textContent.replace('₹', '')) - data.refundDetails.refundAmount;
                                  totalElement.textContent = `₹${newTotal.toFixed(2)}`;
                                }
                              }
                            }

                            Swal.fire({
                              title: 'Cancelled Successfully!',
                              html: `
                                <div class="text-center">
                                    <p>Product has been cancelled.</p>
                                    <div class="alert alert-success">
                                        <p class="mb-1"><strong>Refund Amount:</strong> ₹${data.refundDetails.refundAmount}</p>
                                        <p class="mb-0"><strong>Wallet Balance:</strong> ₹${data.currentWalletBalance}</p>
                                    </div>
                                </div>
                            `,
                              icon: 'success'
                            }).then(() => {
                              window.location.href = data.redirectUrl;
                            });
                          } else {
                            if (buttonElement) {
                              buttonElement.disabled = false;
                            }
                            Swal.fire('Error!', data.message || 'Failed to cancel product', 'error');
                          }
                        })
                        .catch(error => {
                          console.error('Error cancelling product:', error);
                          if (buttonElement) {
                            buttonElement.disabled = false;
                          }
                          Swal.fire('Error!', 'An error occurred while cancelling the product', 'error');
                        });
                    }
                  });
                }
              }
              function requestReturn(orderId, productId) {
                Swal.fire({
                  title: 'Return Product',
                  text: 'Please select a reason for return:',
                  input: 'select',
                  inputOptions: {
                    'defective': 'Defective Product',
                    'wrong_size': 'Wrong Size',
                    'not_as_described': 'Not as Described',
                    'damaged': 'Damaged During Shipping',
                    // 'other': 'Other Reason'
                  },
                  inputPlaceholder: 'Select a reason',
                  showCancelButton: true,
                  confirmButtonText: 'Submit',
                  showLoaderOnConfirm: true,
                  preConfirm: (selectedReason) => {
                    if (selectedReason === 'other') {
                      return new Promise((resolve) => {
                        Swal.fire({
                          title: 'Provide Return Reason',
                          input: 'textarea',
                          inputPlaceholder: 'Explain your reason for return...',
                          inputAttributes: {
                            autocapitalize: 'off'
                          },
                          showCancelButton: true,
                          confirmButtonText: 'Submit',
                          showLoaderOnConfirm: true,
                          preConfirm: (text) => {
                            if (!text || text.trim() === '') {
                              Swal.showValidationMessage('Please enter a reason');
                              return false;
                            }
                            return text;
                          }
                        }).then(result => {
                          resolve(result.value);
                        });
                      });
                    }
                    return selectedReason;
                  },
                  allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                  if (result.value) {
                    fetch(`/requestProductReturn/${orderId}`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        returnReason: result.value,
                        productId: productId
                      })
                    })
                      .then(response => response.json())
                      .then(data => {
                        if (data.success) {
                          Swal.fire({
                            title: 'Return Requested!',
                            text: 'Your return request has been submitted successfully.',
                            icon: 'success'
                          }).then(() => {
                            window.location.reload();
                          });
                        } else {
                          throw new Error(data.message || 'Failed to submit return request.');
                        }
                      })
                      .catch(error => {
                        console.error('Error requesting return:', error);
                        Swal.fire(
                          'Error!',
                          error.message || 'An error occurred while requesting return.',
                          'error'
                        );
                      });
                  }
                });
              }

              function retryPayment(orderId, amount) {
                fetch('/initiate-retry-payment', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    orderId,
                    amount
                  })
                })
                  .then(response => response.json())
                  .then(data => {
                    if (data.success) {
                      const options = {
                        key: data.razorpayKeyId,
                        amount: data.amount,
                        currency: "INR",
                        name: "Your Store Name",
                        description: "Order Payment Retry",
                        order_id: data.orderId,
                        handler: function (response) {
                          verifyRetryPayment(orderId, response);
                        },
                        prefill: {
                          name: data.customerName,
                          email: data.customerEmail
                        },
                        theme: {
                          color: "#3399cc"
                        }
                      };
                      const rzp = new Razorpay(options);
                      rzp.open();
                    } else {
                      Swal.fire('Error', data.message, 'error');
                    }
                  })
                  .catch(error => {
                    console.error('Error initiating retry payment:', error);
                    Swal.fire('Error', 'Failed to initiate payment retry', 'error');
                  });
              }



              function confirmDelete(addressId) {
                Swal.fire({
                  title: 'Are you sure?',
                  text: 'Do you want to delete this address?',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Yes, delete it!',
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = `/deleteAddress?id=${addressId}`;
                  }
                });
              }

              function copyReferralCode() {
                const referralInput = document.getElementById('referralCodeInput');
                referralInput.select();
                document.execCommand('copy');

                // Show tooltip or alert
                alert('Referral code copied to clipboard!');
              }
              document.addEventListener('DOMContentLoaded', () => {
                const urlParams = new URLSearchParams(window.location.search);
                const tabParam = urlParams.get('tab');

                if (tabParam) {
                  // First deactivate all tabs
                  document.querySelectorAll('.nav-link').forEach(link => {
                    link.classList.remove('active');
                  });

                  // Deactivate all tab panes
                  document.querySelectorAll('.tab-pane').forEach(pane => {
                    pane.classList.remove('show', 'active');
                  });

                  // Activate the correct tab
                  const tabTrigger = document.querySelector(`#${tabParam}-tab`);
                  const tabContent = document.querySelector(`#${tabParam}`);

                  if (tabTrigger && tabContent) {
                    tabTrigger.classList.add('active');
                    tabContent.classList.add('show', 'active');
                  }
                }
              });
            </script>